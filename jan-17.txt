All Unique Permutations of an array


Question:->


Given an array arr[] of length n. Find all possible unique permutations of the array in sorted order. A sequence A is greater than sequence B if there is an index i for which Aj = Bj for all j<i and Ai > Bi.

Example 1:

Input: 
n = 3
arr[] = {1, 2, 1}
Output: 
1 1 2
1 2 1
2 1 1
Explanation:
These are the only possible unique permutations
for the given array.
Example 2:

Input: 
n = 2
arr[] = {4, 5}
Output: 
Only possible 2 unique permutations are
4 5
5 4
Your Task:
You don't need to read input or print anything. You only need to complete the function uniquePerms() that takes an integer n, and an array arr of size n as input and returns a sorted list of lists containing all unique permutations of the array.

Expected Time Complexity:  O(n*n!)
Expected Auxilliary Space: O(n*n!)

Constraints:
1 ≤ n ≤ 9
1 ≤ arri ≤ 10


Answer:->


class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr , int n) {
        // code here
        Set<ArrayList<Integer>> ans = new HashSet<>();
        solve(arr, 0, n - 1, ans);
        
        ArrayList<ArrayList<Integer>> result = new ArrayList<>(ans);
        result.sort((a, b) -> {
            for (int i = 0; i < a.size(); i++) {
                int cmp = a.get(i).compareTo(b.get(i));
                if (cmp != 0) {
                    return cmp;
                }
            }
            return 0;
        });
        
        return result;
    }
    static void solve(ArrayList<Integer> arr, int start, int end, Set<ArrayList<Integer>> ans) {
        if (start == end) {
            ans.add(new ArrayList<>(arr));
            return;
        } 
        else {
            for (int i = start; i <= end; i++) {
                swap(arr, start, i);
                solve(new ArrayList<>(arr), start + 1, end, ans);
                swap(arr, start, i);
            }
        }
    }

    static void swap(ArrayList<Integer> arr, int i, int j) {
        int temp = arr.get(i);
        arr.set(i, arr.get(j));
        arr.set(j, temp);
    }
};